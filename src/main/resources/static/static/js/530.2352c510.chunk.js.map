{"version":3,"file":"static/js/530.2352c510.chunk.js","mappings":"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","sources":["layouts/BasicLayout.js","hooks/useCustomLogin.js","pages/login/UserLoginPage.js"],"sourcesContent":["import {Link, useNavigate} from \"react-router-dom\";\nimport \"./BasicLayout.css\"\n\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {logout} from \"../slices/loginSlice\";\n\nconst BasicLayout = ({children}) => {\n        const navigate = useNavigate();\n\n        const dispatch = useDispatch()\n       // const {doLogout, moveToPath} =useCustomLogin()\n\n         const handleClickLogout =()=>{\n             //    doLogout()\n             // alert(\"로그아웃되었습니다.\")\n             // moveToPath(\"/\")\n             dispatch(logout())\n         }\n    const handleClickLogin =()=>{\n        //    doLogout()\n        // alert(\"로그아웃되었습니다.\")\n        // moveToPath(\"/\")\n        // dispatch(login())\n        navigate(\"/user/new\")\n        }\n\n\n\n    // const handleClickLogout =()=>{\n    //     localStorage.removeItem('isLoggedIn');\n    //     navigate(\"/\");\n    //\n    // }\n\n    const loginState = useSelector((state) => state.loginSlice);\n\n  return(\n    <>\n    \n    <header>\n    <nav className=\"navbar navbar-expand-lg\" id=\"nav\" >\n    <div className=\"container-fluid\" id=\"nav-form\">\n      <a href={'/'} className=\"navbar-brand\" id='logo'>OnedaySeed</a>\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      < ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n        <li className=\"nav-item\">\n          <a href={'/about'} className=\"nav-link active\" aria-current=\"page\" >About Us</a>\n        </li>\n\n          {/*로그인한 사용자에게만 보이게*/}\n          { loginState.id ?\n          <>\n        <li className=\"nav-item\">\n          <a href={'/mypage'} className=\"nav-link\">My Page</a>\n        </li>\n       </>\n        :<></>}\n\n           {/*로그인한 사용자에게만 보이게*/}\n          {loginState.id ?\n              <>\n                  <li className=\"nav-item\">\n                      <a className=\"nav-link\" onClick={handleClickLogout}>Logout</a>\n                  </li>\n               </>\n              :<></>}\n\n\n\n        {/* 로그인 전 사용자에게 '로그인' 보이게 */}\n          { ! loginState.id?\n              <>\n        <li className=\"nav-item\">\n          <a href=\"/user/login\" className=\"nav-link disabled\" aria-disabled=\"true\" onClick={handleClickLogin} >Login</a>\n        </li>\n              </>: <></>}\n      </ul>\n      <form className=\"d-flex\" role=\"search\">\n        <input className=\"form-control me-2 \" id=\"search-input\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n        <button className=\"btn btn-outline-success \" id='search-btn' type=\"submit\">Search</button>\n      </form>\n    </div>\n  </div>\n </nav>\n <hr/>\n    </header>\n\n\n          <main>\n            {children}\n          </main>\n\n    <footer>\n    <hr/>\n      <div className=\"footer-body\">\n        <span><b>(주)원데이씨드</b> <br/>\n        <span className=\"our-info\">서울시 종로구 인사동길 12 15층 <br/>\n         사업자등록번호 : 135-87-***** | 통신판매업 : 신고번호 제2024-서울종로-987**호  <br/>\n         </span> <br/>\n         <span className=\"not-host\">(주)원데이씨드는 통신판매중개자이며, 통신판매의 당사자가 아닙니다. 상품, 상품정보, 거래에 관한 의무와 책임은 판매자에게 있습니다.</span>\n        </span>\n        <br/><br/><br/><br/>\n      </div>   \n    </footer>\n\n\n    </>\n\n  )\n}\nexport default BasicLayout;","import {createSearchParams, Navigate, useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginPostAsync, logout} from \"../slices/loginSlice\";\n\nconst useCustomLogin = () => {\n\n    const navigate = useNavigate()\n    const dispatch = useDispatch()\n    const loginState = useSelector(state => state.loginSlice) //로그인,로그아웃 했을 경우의 상태\n    const isLogin = loginState.userId ?true :false //로그인 여부\n\n    // const doLogin = async (loginParam) => { //로그인 함수\n    //     const action = await dispatch(loginPostAsync(loginParam))\n    //\n    //     return action.payload\n    // }\n\n    const doLogout =() => { //로그아웃 함수\n        dispatch(logout())\n    }\n\n    const moveToPath = (path) =>{ //페이지 이동\n        navigate({pathname:path},{replace:true})\n    }\n\n    const moveToLogin = () => { //로그인페이지로 이동\n        navigate({pathname:'/user/login'},{replace:true})\n    }\n\n    const moveToLoginReturn = () => { //로그인페이지로 이동 페이지(로그인해야지만 이용 가능한 페이지 클릭(이동시))\n        return<Navigate replace to=\"/user/login\" />\n    }\n\n    const exceptionHandle = (ex) =>{\n        console.log(\"Exception..........\")\n        console.log(ex)\n        const errorMsg = ex.response.data.error\n        const errorStr = createSearchParams({error:errorMsg}).toString()\n\n        if(errorMsg === 'REQUIRE_LOGIN'){\n            alert(\"로그인을 진행해주세요!\")\n            navigate({pathname:'/user/login',search:errorStr})\n            return\n        }\n        if(ex.response.data.error === \"ERROR_ACCESSDENIED\"){\n            alert(\"해당 메뉴를 사용할 권한이 없습니다.\")\n            navigate({pathname:'/user/login',search:errorStr})\n            return\n        }\n    }\n\n    return{loginState, isLogin, doLogout, moveToPath, moveToLogin, moveToLoginReturn, exceptionHandle}\n}\nexport default useCustomLogin;","import {Link, useNavigate} from \"react-router-dom\";\nimport BasicLaylout from \"../../layouts/BasicLayout\";\nimport \"./LoginForm.css\"\nimport {useEffect, useState} from \"react\";\nimport {useDispatch} from \"react-redux\";\n\nimport {Form} from \"react-bootstrap\";\nimport axios from \"axios\";\nimport useCustomLogin from \"../../hooks/useCustomLogin\";\n\n\nconst initState={\n    userId:\"\",\n    password:\"\"\n\n}\nconst UserLoginPage =()=>{\n\n    const [login,setLogin] = useState({...initState});\n    // const { doLogin } = useCustomLogin();\n\n    const dispatch = useDispatch()\n\n    const fetchData = async()=>{\n        try{\n            const response = await axios.get(\"/api/userLogin\");\n            setLogin(response.data);\n        }catch (error){\n            console.log('ERROR FETCHING USER LOGIN : ', error);\n        }\n    };\n\n    useEffect(() => {\n        fetchData()\n    }, []);\n\n\n    const navigate = useNavigate();\n\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        setLogin((prevLogin) => ({\n            ...prevLogin,\n            [name]: value,\n        }));\n    };\n\n    const handleSubmit = async (e) => {\n\n        // 새로고침 방지\n        e.preventDefault();\n\n        console.log(login.userId);\n        console.log(login.password);\n\n        try {\n            const response = await axios.post(\"/api/userLogin\", {\n                userId: login.userId,\n                password: login.password\n\n            });\n            // await doLogin(login);\n            if (response.data.alertMessage) {\n                // 에러 또는 성공 메시지가 있으면 alert 창 띄우기\n                alert(response.data.alertMessage);\n            }\n\n            if (response.data.successMessage) {\n                console.log('Form submitted successfully:', response.data.successMessage);\n                // localStorage.setItem(\"isLoggedIn\", JSON.stringify(response.data.isLoggedIn));\n\n                dispatch(login(login));\n\n                fetchData();\n                navigate(\"/\");\n\n            }\n        } catch (error) {\n            if (error.response) {\n                // 서버 응답이 에러인 경우\n                console.error('Error submitting form:', error.response.data);\n                // 클라이언트에서 에러 메시지 처리 로직 추가\n            } else if (error.request) {\n                // 요청이 전혀 이루어지지 않은 경우\n                console.error('Request error:', error.request);\n            } else {\n                // 기타 에러\n                console.error('Unexpected error:', error.message);\n            }\n          }\n\n    }\n    return(\n      <>\n      <BasicLaylout>\n      <div className=\"loginBox\">\n        <h1><b>로그인</b></h1>\n\n            <Form onSubmit={handleSubmit}>\n            <span className=\"formName\">아이디</span>\n            <input className=\"formInfo\" type=\"text\" id=\"id_val\" placeholder=\"아이디를 입력해주세요\" name=\"userId\" value={login.userId} onChange={handleInputChange}></input>\n\n            <span className=\"formName\">비밀번호</span>\n            <input className=\"formInfo\" type=\"password\" id=\"password_val\" placeholder=\"비밀번호를 입력해주세요\" name=\"password\" value={login.password} onChange={handleInputChange}></input>\n\n\n\n          <div className=\"loginBtn\">\n           <button className=\"s_bt\" type=\"submit\" >로그인</button>\n            </div>\n            {/*<input type=\"hidden\" className=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />*/}\n            {/*  토큰값 가져갈수있나..?  */}\n            </Form>\n\n        <Link to={\"/host/login\"} className=\"another-login\">호스트로 로그인하기</Link>\n\n      <span className=\"choiceNewmember\">아직 회원이 아니신가요?</span>\n      <div className=\"newmember\">\n          <button className=\"another-btn\"><Link to={\"/host/new\"} >호스트 회원가입</Link></button>\n          <button className=\"another-btn\"><Link to={\"/user/new\"} >게스트 회원가입</Link></button>\n      </div>\n\n      </div>\n      </BasicLaylout>\n      </>\n    )\n\n}\nexport default UserLoginPage;\n\n\n\n\n//    // const [loginParam, setLoginParam] = useState({})\n//     // const {doLogin,moveToPath} = useCustomLogin()\n//     //\n//     //\n//     // const dispatch = useDispatch()\n//     // const navigate= useNavigate()\n//     //\n//     //     //동기화 호출\n//     //     //dispatch(login(loginParam))\n//     //\n//     //     //비동기 호출\n//     //     // dispatch(loginPostAsync(loginParam))//loginSlice의 비동기 호출\n//     //     //     .unwrap()\n//     //     //     .then(data => {\n//     //     //         console.log(\"after unwrap\")\n//     //     //         console.log(data)\n//     //     //         if(data.error){\n//     //     //             alert(\"아이디와 비밀번호를 다시 확인해주세요!\")\n//     //     //         }else{\n//     //     //             alert(\"로그인 성공\")\n//     //     //             navigate({pathname:\"/\"},{replace:true}) //뒤로 가기 했을때 로그인 화면 볼 수 없게\n//     //     //         }\n//     //     //     })\n//     //\n//     // const handleClickLogin = () =>{\n//     //     //useCustomLogin 이용\n//     //     doLogin(loginParam) //loginSlice의 비동기 호출\n//     //         .then(data=>{\n//     //             console.log(data)\n//     //\n//     //             if(data.error){\n//     //                 alert(\"아이디와 비밀번호를 다시 확인해주세요!\")\n//     //             }else{\n//     //                 alert(\"로그인 성공\")\n//     //                 moveToPath('/')\n//     //             }\n//     //         })\n//     //\n//     //         }"],"names":["_ref","children","navigate","useNavigate","dispatch","useDispatch","loginState","useSelector","state","loginSlice","_jsxs","_Fragment","_jsx","className","id","href","type","onClick","handleClickLogout","logout","handleClickLogin","role","placeholder","initState","userId","password","UserLoginPage","login","setLogin","useState","fetchData","async","response","axios","get","data","error","console","log","useEffect","handleInputChange","e","name","value","target","prevLogin","BasicLaylout","Form","onSubmit","preventDefault","post","alertMessage","alert","successMessage","request","message","onChange","Link","to"],"sourceRoot":""}