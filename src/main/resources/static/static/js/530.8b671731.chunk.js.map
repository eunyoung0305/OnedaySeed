{"version":3,"file":"static/js/530.8b671731.chunk.js","mappings":"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","sources":["layouts/BasicLayout.js","hooks/useCustomLogin.js","pages/login/UserLoginPage.js"],"sourcesContent":["import {Link, useNavigate} from \"react-router-dom\";\nimport \"./BasicLayout.css\"\n\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {logout} from \"../slices/loginSlice\";\n\nconst BasicLayout = ({children}) => {\n        const navigate = useNavigate();\n\n        const dispatch = useDispatch()\n\n        const loginState = useSelector((state)=>state.loginSlice)\n       // const {doLogout, moveToPath} =useCustomLogin()\n       //  const userId = loginState.userId ? `Welcome, ${loginState.userId}` : 'Welcome';\n    const userId = loginState.userId ? `Welcome, ${loginState.userId}` : 'Welcome';\n    const handleClickLogout =()=>{\n             localStorage.removeItem(\"isLoggedIn\");\n             // localStorage.removeItem(\"userId\");\n             dispatch(logout());\n             navigate(\"/user/login\");\n         }\n    // const handleClickLogin =()=>{\n    //     //    doLogout()\n    //     // alert(\"로그아웃되었습니다.\")\n    //     // moveToPath(\"/\")\n    //     // dispatch(login())\n    //     }e\n\n\n    // const handleClickLogout =()=>{\n    //     localStorage.removeItem('isLoggedIn');\n    //     navigate(\"/\");\n    //\n    // }\n\n\n    return(\n    <>\n    \n    <header>\n    <nav className=\"navbar navbar-expand-lg\" id=\"nav\" >\n    <div className=\"container-fluid\" id=\"nav-form\">\n      <a href={'/'} className=\"navbar-brand\" id='logo'>OnedaySeed</a>\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      < ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n        <li className=\"nav-item\">\n          <a href={'/about'} className=\"nav-link active\" aria-current=\"page\" >About Us</a>\n        </li>\n\n          {/*로그인한 사용자에게만 보이게*/}\n          { loginState.userId ?\n          <>\n        <li className=\"nav-item\">\n          <a href={'/mypage'} className=\"nav-link\">My Page</a>\n        </li>\n       </>\n        :<></>}\n\n          {/*로그인한 사용자에게만 보이게*/}\n          {loginState.userId ?\n              <>\n                  <li className=\"nav-item\">\n                      <a  className=\"nav-link active\" aria-current=\"page\" onClick={handleClickLogout}>Logout</a>\n                  </li>\n               </>\n              :<></>}\n          {/*로그인한 사용자에게만 보이게*/}\n          {loginState.userId ?\n              <>\n          <li className=\"nav-item\">\n              <a href=\"/user/login\" className=\"nav-link active\" aria-current=\"page\" >{userId}</a>\n          </li>\n              </>\n              :<></>}\n\n        {/* 로그인 전 사용자에게 '로그인' 보이게 */}\n          { ! loginState.userId?\n              <>\n        <li className=\"nav-item\">\n          <a href=\"/user/login\" className=\"nav-link active\" aria-current=\"page\" >Login</a>\n        </li>\n              </>: <></>}\n      </ul>\n      <form className=\"d-flex\" role=\"search\">\n        <input className=\"form-control me-2 \" id=\"search-input\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n        <button className=\"btn btn-outline-success \" id='search-btn' type=\"submit\">Search</button>\n      </form>\n    </div>\n  </div>\n </nav>\n <hr/>\n    </header>\n\n\n          <main>\n            {children}\n          </main>\n\n    <footer>\n    <hr/>\n      <div className=\"footer-body\">\n        <span><b>(주)원데이씨드</b> <br/>\n        <span className=\"our-info\">서울시 종로구 인사동길 12 15층 <br/>\n         사업자등록번호 : 135-87-***** | 통신판매업 : 신고번호 제2024-서울종로-987**호  <br/>\n         </span> <br/>\n         <span className=\"not-host\">(주)원데이씨드는 통신판매중개자이며, 통신판매의 당사자가 아닙니다. 상품, 상품정보, 거래에 관한 의무와 책임은 판매자에게 있습니다.</span>\n        </span>\n        <br/><br/><br/><br/>\n      </div>   \n    </footer>\n\n\n    </>\n\n  )\n}\nexport default BasicLayout;","import {createSearchParams, Navigate, useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginPostAsync, logout} from \"../slices/loginSlice\";\n\nconst useCustomLogin = () => {\n\n    const navigate = useNavigate()\n    const dispatch = useDispatch()\n    const loginState = useSelector(state => state.loginSlice) //로그인,로그아웃 했을 경우의 상태\n    const isLogin = loginState.userId ?true :false //로그인 여부\n\n    // const doLogin = async (loginParam) => { //로그인 함수\n    //     const action = await dispatch(loginPostAsync(loginParam))\n    //\n    //     return action.payload\n    // }\n\n    const doLogout =() => { //로그아웃 함수\n        dispatch(logout())\n    }\n\n    const moveToPath = (path) =>{ //페이지 이동\n        navigate({pathname:path},{replace:true})\n    }\n\n    const moveToLogin = () => { //로그인페이지로 이동\n        navigate({pathname:'/user/login'},{replace:true})\n    }\n\n    const moveToLoginReturn = () => { //로그인페이지로 이동 페이지(로그인해야지만 이용 가능한 페이지 클릭(이동시))\n        return<Navigate replace to=\"/user/login\" />\n    }\n\n    const exceptionHandle = (ex) =>{\n        console.log(\"Exception..........\")\n        console.log(ex)\n        const errorMsg = ex.response.data.error\n        const errorStr = createSearchParams({error:errorMsg}).toString()\n\n        if(errorMsg === 'REQUIRE_LOGIN'){\n            alert(\"로그인을 진행해주세요!\")\n            navigate({pathname:'/user/login',search:errorStr})\n            return\n        }\n        if(ex.response.data.error === \"ERROR_ACCESSDENIED\"){\n            alert(\"해당 메뉴를 사용할 권한이 없습니다.\")\n            navigate({pathname:'/user/login',search:errorStr})\n            return\n        }\n    }\n\n    return{loginState, isLogin, doLogout, moveToPath, moveToLogin, moveToLoginReturn, exceptionHandle}\n}\nexport default useCustomLogin;","import {Link, useNavigate} from \"react-router-dom\";\nimport BasicLaylout from \"../../layouts/BasicLayout\";\nimport \"./LoginForm.css\"\nimport {useEffect, useState} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {login as loginAction} from \"../../slices/loginSlice\";\nimport {Form} from \"react-bootstrap\";\nimport axios from \"axios\";\nimport useCustomLogin from \"../../hooks/useCustomLogin\";\n\n\nconst initState={\n    userId:\"\",\n    password:\"\"\n}\nconst UserLoginPage =()=>{\n\n    const [login,setLogin] = useState({...initState});\n    // const { doLogin } = useCustomLogin();\n\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    const fetchData = async()=>{\n        try{\n            const response = await axios.get(\"/api/userLogin\");\n            setLogin(response.data);\n        }catch (error){\n            console.log('ERROR FETCHING USER LOGIN : ', error);\n        }\n    };\n\n    useEffect(() => {\n        fetchData()\n    }, []);\n\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        setLogin((prevLogin) => ({\n            ...prevLogin,\n            [name]: value,\n        }));\n    };\n\n    const handleSubmit = async (e) => {\n\n        // 새로고침 방지\n        e.preventDefault();\n\n        console.log(login.userId);\n        console.log(login.password);\n\n        try {\n            const response = await axios.post(\"/api/userLogin\", {\n                userId: login.userId,\n                password: login.password\n\n            });\n            // await doLogin(login);\n            if (response.data.alertMessage) {\n                // 에러 또는 성공 메시지가 있으면 alert 창 띄우기\n                alert(response.data.alertMessage);\n            }\n\n            if (response.data.successMessage) {\n                console.log('Form submitted successfully:', response.data.successMessage);\n                localStorage.setItem(\"isLoggedIn\", \"true\");\n                localStorage.setItem(\"userId\", login.userId);\n\n                // 리덕스 스토어에 로그인 상태 업데이트\n                dispatch(loginAction(true));\n\n                fetchData();\n                // 홈 페이지로 이동\n                navigate(\"/\");\n\n            }\n        } catch (error) {\n            if (error.response) {\n                // 서버 응답이 에러인 경우\n                console.error('Error submitting form:', error.response.data);\n                // 클라이언트에서 에러 메시지 처리 로직 추가\n            } else if (error.request) {\n                // 요청이 전혀 이루어지지 않은 경우\n                console.error('Request error:', error.request);\n            } else {\n                // 기타 에러\n                console.error('Unexpected error:', error.message);\n            }\n          }\n\n    }\n    return(\n      <>\n      <BasicLaylout>\n      <div className=\"loginBox\">\n        <h1><b>로그인</b></h1>\n\n            <Form onSubmit={handleSubmit}>\n            <span className=\"formName\">아이디</span>\n            <input className=\"formInfo\" type=\"text\" id=\"id_val\" placeholder=\"아이디를 입력해주세요\" name=\"userId\" value={login.userId} onChange={handleInputChange}></input>\n\n            <span className=\"formName\">비밀번호</span>\n            <input className=\"formInfo\" type=\"password\" id=\"password_val\" placeholder=\"비밀번호를 입력해주세요\" name=\"password\" value={login.password} onChange={handleInputChange}></input>\n\n\n\n          <div className=\"loginBtn\">\n           <button className=\"s_bt\" type=\"submit\" >로그인</button>\n            </div>\n            {/*<input type=\"hidden\" className=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />*/}\n            {/*  토큰값 가져갈수있나..?  */}\n            </Form>\n\n        <Link to={\"/host/login\"} className=\"another-login\">호스트로 로그인하기</Link>\n\n      <span className=\"choiceNewmember\">아직 회원이 아니신가요?</span>\n      <div className=\"newmember\">\n          <button className=\"another-btn\"><Link to={\"/host/new\"} >호스트 회원가입</Link></button>\n          <button className=\"another-btn\"><Link to={\"/user/new\"} >게스트 회원가입</Link></button>\n      </div>\n\n      </div>\n      </BasicLaylout>\n      </>\n    )\n\n}\nexport default UserLoginPage;\n\n\n\n\n//    // const [loginParam, setLoginParam] = useState({})\n//     // const {doLogin,moveToPath} = useCustomLogin()\n//     //\n//     //\n//     // const dispatch = useDispatch()\n//     // const navigate= useNavigate()\n//     //\n//     //     //동기화 호출\n//     //     //dispatch(login(loginParam))\n//     //\n//     //     //비동기 호출\n//     //     // dispatch(loginPostAsync(loginParam))//loginSlice의 비동기 호출\n//     //     //     .unwrap()\n//     //     //     .then(data => {\n//     //     //         console.log(\"after unwrap\")\n//     //     //         console.log(data)\n//     //     //         if(data.error){\n//     //     //             alert(\"아이디와 비밀번호를 다시 확인해주세요!\")\n//     //     //         }else{\n//     //     //             alert(\"로그인 성공\")\n//     //     //             navigate({pathname:\"/\"},{replace:true}) //뒤로 가기 했을때 로그인 화면 볼 수 없게\n//     //     //         }\n//     //     //     })\n//     //\n//     // const handleClickLogin = () =>{\n//     //     //useCustomLogin 이용\n//     //     doLogin(loginParam) //loginSlice의 비동기 호출\n//     //         .then(data=>{\n//     //             console.log(data)\n//     //\n//     //             if(data.error){\n//     //                 alert(\"아이디와 비밀번호를 다시 확인해주세요!\")\n//     //             }else{\n//     //                 alert(\"로그인 성공\")\n//     //                 moveToPath('/')\n//     //             }\n//     //         })\n//     //\n//     //         }"],"names":["_ref","children","navigate","useNavigate","dispatch","useDispatch","loginState","useSelector","state","loginSlice","userId","concat","_jsxs","_Fragment","_jsx","className","id","href","type","onClick","handleClickLogout","localStorage","removeItem","logout","role","placeholder","initState","password","UserLoginPage","login","setLogin","useState","fetchData","async","response","axios","get","data","error","console","log","useEffect","handleInputChange","e","name","value","target","prevLogin","BasicLaylout","Form","onSubmit","preventDefault","post","alertMessage","alert","successMessage","setItem","loginAction","request","message","onChange","Link","to"],"sourceRoot":""}