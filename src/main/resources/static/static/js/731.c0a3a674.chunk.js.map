{"version":3,"file":"static/js/731.c0a3a674.chunk.js","mappings":"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","sources":["layouts/BasicLayout.js","pages/login/UserLoginPage.js"],"sourcesContent":["import {Link, useNavigate} from \"react-router-dom\";\nimport \"./BasicLayout.css\"\n\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {logout} from \"../slices/loginSlice\";\nimport { hostLogout }from \"../slices/hostLoginSlice\";\nimport {useState} from \"react\";\n\nconst BasicLayout = ({children}) => {\n\n    const navigate = useNavigate();\n    const dispatch = useDispatch()\n\n    const isLoggedIn = useSelector((state) => state.login.isLoggedIn);\n    const userId = useSelector((state) => state.login.userId);\n    const userName = useSelector((state) => state.login.userName);\n    // const userName22 = localStorage.getItem(\"userName\");\n\n    const isHostLoggedIn = useSelector((state) => state.hostLogin.isHostLoggedIn);\n    const hostNum = useSelector((state) => state.hostLogin.hostNum);\n    const hostName = useSelector((state) => state.hostLogin.hostName);\n\n    const [searchValue, setSearchValue] = useState(\"\");\n\n    const handleClickLogout =()=>{\n        localStorage.removeItem(\"isLoggedIn\");\n        dispatch(logout());\n        navigate(\"/\");\n    }\n\n    const handleClickHostLogout =()=>{\n        localStorage.removeItem(\"isHostLoggedIn\");\n        dispatch(hostLogout());\n        navigate(\"/\");\n    }\n\n    const handleSearch = (e) => {\n        e.preventDefault();\n        if (!searchValue.trim()) {\n            alert('검색어를 입력해주세요.');\n            return;\n        }\n        navigate(`/lesson/list?q=${searchValue.trim()}`);\n    };\n\n    return(\n        <>\n\n            <header>\n                <nav className=\"navbar navbar-expand\" id=\"nav\" >\n                    <div className=\"container-fluid\" id=\"nav-form\">\n                        <a href={'/'} className=\"navbar-brand\" id='logo'>OnedaySeed</a>\n                        {/* <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button> */}\n                        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                            < ul className=\"navbar-nav me-auto mb-lg-0 \">\n                                {/*  ul: mb-2 */}\n                                <li className=\"nav-item\">\n                                    <a href={'/about'} className=\"nav-link active \" aria-current=\"page\" >About Us</a>\n                                </li>\n\n                                {/*   !가 붙어있어야 로그인전 화면에 노출 ! */}\n\n                                {/* User */}\n\n                                {/*로그인한 사용자에게만 보이게*/}\n                                { isLoggedIn ?\n                                    <>\n                                        <li className=\"nav-item\">\n                                            <a href={'/myPage'} className=\"nav-link\">My Page</a>\n                                        </li>\n                                    </>\n                                    :<></>}\n\n                                {/*로그인한 사용자에게만 보이게*/}\n                                { isLoggedIn ?\n                                    <>\n                                        <li className=\"nav-item\">\n                                            <a href=\"/\" className=\"nav-link\" onClick={handleClickLogout}>Logout</a>\n                                        </li>\n                                    </>\n                                    :<></>}\n                                {/*로그인한 사용자에게만 보이게*/}\n                                { isLoggedIn ?\n                                    <>\n                                        <li className=\"nav-item\">\n                                            <a className=\"nav-link active\" aria-current=\"page\" >\n                                                {userId}님, 반가워요!\n                                            </a>\n                                        </li>\n                                    </>\n                                    :<></>}\n\n                                {/* 로그인 전 사용자에게 '로그인' 보이게 */}\n                                {( !isLoggedIn  &&  !isHostLoggedIn )?\n                                    <>\n                                        <li className=\"nav-item\">\n                                            <a href=\"/user/login\" className=\"nav-link\" >Login</a>\n                                        </li>\n                                    </>: <></>}\n\n\n                                {/* Host */}\n\n\n\n                                {/*로그인한 호스트에게만 보이게*/}\n                                { isHostLoggedIn ?\n                                    <>\n                                        <li className=\"nav-item\">\n                                            <a href={'/host/myPage'} className=\"nav-link\">My Page</a>\n                                            {/*    레슨 파일보고 페이지 맞게 연결*/}\n                                        </li>\n                                    </>\n                                    :<></>}\n\n                                {/*로그인한 호스트에게만 보이게*/}\n                                { isHostLoggedIn ?\n                                    <>\n                                        <li className=\"nav-item\">\n                                            <a href=\"/\" className=\"nav-link\" onClick={handleClickHostLogout}>Logout</a>\n                                        </li>\n                                    </>\n                                    :<></>}\n                                {/*로그인한 호스트에게만 보이게*/}\n                                { isHostLoggedIn ?\n                                    <>\n                                        <li className=\"nav-item\">\n                                            <a className=\"nav-link active\" aria-current=\"page\" >{hostNum}님, 반가워요!</a>\n                                        </li>\n                                    </>\n                                    :<></>}\n\n                            </ul>\n                            <form className=\"d-flex\" role=\"search\" onSubmit={handleSearch}>\n                                <input className=\"form-control me-2 \" id=\"search-input\" type=\"search\"  aria-label=\"Search\" value={searchValue} onChange={(e) => setSearchValue(e.target.value)}/>\n                                <button className=\"btn btn-outline-success \" id='search-btn' type=\"submit\">검색</button>\n                            </form>\n                        </div>\n                    </div>\n                </nav>\n                <hr/>\n            </header>\n\n            <main>\n                {children}\n            </main>\n\n            <footer>\n                <hr/>\n                <div className=\"footer-body\">\n        <span><b>(주)원데이씨드</b> <br/>\n        <span className=\"our-info\">서울시 종로구 인사동길 12 15층 <br/>\n         사업자등록번호 : 135-87-***** | 통신판매업 : 신고번호 제2024-서울종로-987**호  <br/>\n         </span> <br/>\n         <span className=\"not-host\">(주)원데이씨드는 통신판매중개자이며, 통신판매의 당사자가 아닙니다. 상품, 상품정보, 거래에 관한 의무와 책임은 판매자에게 있습니다.</span>\n        </span>\n                    <br/><br/><br/><br/>\n                </div>\n            </footer>\n\n\n        </>\n\n    )\n}\nexport default BasicLayout;","import {Link, useNavigate} from \"react-router-dom\";\nimport BasicLaylout from \"../../layouts/BasicLayout\";\nimport \"./LoginForm.css\"\nimport {useEffect, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {login as loginAction} from \"../../slices/loginSlice\";\nimport {Form} from \"react-bootstrap\";\nimport axios from \"axios\";\n\n\n\nconst initState={\n    userId:\"\",\n    password:\"\"\n}\nconst UserLoginPage =()=>{\n\n    const [login,setLogin] = useState({...initState});\n\n    const isLoggedIn = useSelector((state) => state.login.isLoggedIn);\n\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    const fetchData = async()=>{\n        try{\n            const response = await axios.get(\"/api/userLogin\");\n            setLogin(response.data);\n        }catch (error){\n            console.log('ERROR FETCHING USER LOGIN : ', error);\n        }\n    };\n\n    useEffect(() => {\n        const isLoggedIn = localStorage.getItem('isLoggedIn');\n        if (isLoggedIn) {\n            // 로그인 상태인 경우 홈페이지로 이동\n            navigate(\"/\");\n        }\n\n        const userName = localStorage.getItem(\"userName\");\n        if (userName) {\n            // 사용자 이름이 있다면, 로그인 폼에 설정\n            setLogin((prevLogin) => ({\n                ...prevLogin,\n                userName: userName\n            }));\n        }\n\n\n    }, [navigate]);\n\n\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        setLogin((prevLogin) => ({\n            ...prevLogin,\n            [name]: value,\n        }));\n    };\n\n    // 서버로 사용자 ID 전송(마이페이지)\n    const sendUserIdToServer = async (userId) => {\n        try {\n            await axios.post(\"/api/sendUserId\", { userId });\n        } catch (error) {\n            console.error('서버로 사용자 ID 전송 실패:', error);\n        }\n    };\n\n    // 서버로 사용자 ID 전송(카트)\n    const sendUserIdToCart = async (userId) => {\n        try {\n            await axios.post(\"/api/cart/sendUserId\", { userId });\n        } catch (error) {\n            console.error('서버로 사용자 ID 전송 실패:', error);\n        }\n    };\n\n    // 서버로 사용자 ID 전송(오더)\n    const sendUserIdToOrder = async (userId) => {\n        try {\n            await axios.post(\"/api/order/sendUserId\", { userId });\n        } catch (error) {\n            console.error('서버로 사용자 ID 전송 실패:', error);\n        }\n    };\n    const handleSubmit = async (e) => {\n\n        // 새로고침 방지\n        e.preventDefault();\n\n        if (!login.userId) {\n            alert(\"아이디를 입력해주세요.\");\n            return;\n        }\n        if (!login.password) {\n            alert(\"비밀번호를 입력해주세요.\");\n            return;\n        }\n\n        // console.log(login.userId);\n        // console.log(login.password);\n\n        try {\n            const response = await axios.post(\"/api/userLogin\", {\n                userId: login.userId,\n                password: login.password\n\n            });\n\n            if (response.data.alertMessage) {\n                // 에러 또는 성공 메시지가 있으면 alert 창 띄우기\n                alert(response.data.alertMessage);\n            }\n\n            if (response.data.successMessage) {\n                console.log('Form submitted successfully:', response.data.successMessage);\n\n                const { userId, userName } = response.data;\n\n                // console.log(\"가지고 가는 유저 아이디와 이름 : \")\n                // console.log(userId,userName);\n\n                // 로그인 성공 - 서버로 사용자ID 전송\n                sendUserIdToServer(login.userId);\n                sendUserIdToCart(login.userId);\n                sendUserIdToOrder(login.userId);\n\n                localStorage.setItem(\"isLoggedIn\", true);\n                dispatch(loginAction({\n                    userId: login.userId,\n                    userName: login.userName, // userName 정보를 Redux 상태에 저장 , 해당 부분의 login은 현재페이지의 값 아닌가?\n                }));\n\n\n                navigate(\"/\");\n            }\n\n        } catch (error) {\n            if (error.response) {\n                // 서버 응답이 에러인 경우\n                console.error('Error submitting form:', error.response.data);\n                // 에러 메시지가 있는 경우, 해당 메시지를 alert 창에 표시\n                alert(JSON.stringify(error.response.data));\n                //글자 자르기\n                return;\n                // alert(error.response.data);\n                // 클라이언트에서 에러 메시지 처리 로직 추가\n            } else if (error.request) {\n                // 요청이 전혀 이루어지지 않은 경우\n                console.error('Request error:', error.request);\n            } else {\n                // 기타 에러\n                console.error('Unexpected error:', error.message);\n            }\n        }\n\n    }\n    return(\n        <>\n            <BasicLaylout>\n                <div className=\"loginBox\">\n                    <h1><b>로그인</b></h1>\n\n                    <Form onSubmit={handleSubmit}>\n                        <span className=\"formName\">아이디</span>\n                        <input className=\"formInfo\" type=\"text\" id=\"id_val\" placeholder=\"아이디를 입력해주세요\" name=\"userId\" value={login.userId} onChange={handleInputChange}></input>\n\n                        <span className=\"formName\">비밀번호</span>\n                        <input className=\"formInfo\" type=\"password\" id=\"password_val\" placeholder=\"비밀번호를 입력해주세요\" name=\"password\" value={login.password} onChange={handleInputChange}></input>\n\n\n\n                        <div className=\"loginBtn\">\n                            <button className=\"s_bt\" type=\"submit\" >로그인</button>\n                        </div>\n\n                    </Form>\n\n                    <Link to={\"/host/login\"} className=\"another-login\">호스트로 로그인하기</Link>\n\n                    <span className=\"choiceNewmember\"><b>아직 회원이 아니신가요?</b></span>\n                    <div className=\"newmember\">\n                        <button className=\"another-btn\"><Link to={\"/host/new\"} >호스트 회원가입</Link></button>\n                        <button className=\"another-btn\"><Link to={\"/user/new\"} >게스트 회원가입</Link></button>\n                    </div>\n\n                </div>\n            </BasicLaylout>\n        </>\n    )\n\n}\nexport default UserLoginPage;\n\n"],"names":["_ref","children","navigate","useNavigate","dispatch","useDispatch","isLoggedIn","useSelector","state","login","userId","isHostLoggedIn","userName","hostLogin","hostNum","searchValue","setSearchValue","hostName","useState","_jsxs","_Fragment","_jsx","className","id","href","onClick","handleClickLogout","localStorage","removeItem","logout","handleClickHostLogout","hostLogout","role","onSubmit","e","preventDefault","trim","concat","alert","type","value","onChange","target","initState","password","UserLoginPage","setLogin","useEffect","getItem","prevLogin","handleInputChange","name","BasicLaylout","Form","async","response","axios","post","data","alertMessage","successMessage","console","log","error","sendUserIdToServer","sendUserIdToCart","sendUserIdToOrder","setItem","loginAction","JSON","stringify","request","message","placeholder","Link","to"],"sourceRoot":""}