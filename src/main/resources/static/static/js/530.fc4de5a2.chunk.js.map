{"version":3,"file":"static/js/530.fc4de5a2.chunk.js","mappings":"qOAIA,MCOMA,EAAU,CACZC,OAAO,GACPC,SAAS,IA0Hb,EAxHqBC,KAEjB,MAAOC,EAAMC,IAAYC,EAAAA,EAAAA,UAAS,IAAIN,IAShCO,IAHaC,EAAAA,EAAAA,KAAaC,GAAUA,EAAML,MAAMM,cAGrCC,EAAAA,EAAAA,OACXC,GAAWC,EAAAA,EAAAA,OAWjBC,EAAAA,EAAAA,YAAU,KACaC,aAAaC,QAAQ,eAGpCJ,EAAS,IACb,GACD,CAACA,IAIJ,MAAMK,EAAqBC,IACvB,MAAM,KAAEC,EAAI,MAAEC,GAAUF,EAAEG,OAC1BhB,GAAUiB,IAAS,IACZA,EACH,CAACH,GAAOC,KACT,EA8CP,OACEG,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACAF,EAAAA,EAAAA,KAACG,EAAAA,EAAY,CAAAD,UACbE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUH,SAAA,EACvBF,EAAAA,EAAAA,KAAA,MAAAE,UAAIF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,0BAEHE,EAAAA,EAAAA,MAACE,EAAAA,EAAI,CAACC,SAjDOC,UAGjBb,EAAEc,iBAEFC,QAAQC,IAAI9B,EAAMH,QAClBgC,QAAQC,IAAI9B,EAAMF,UAElB,IACI,MAAMiC,QAAiBC,EAAAA,EAAMC,KAAK,iBAAkB,CAChDpC,OAAQG,EAAMH,OACdC,SAAUE,EAAMF,WAIhBiC,EAASG,KAAKC,cAEdC,MAAML,EAASG,KAAKC,cAGpBJ,EAASG,KAAKG,iBACdR,QAAQC,IAAI,+BAAgCC,EAASG,KAAKG,gBAC1D1B,aAAa2B,QAAQ,cAAc,GACnCnC,GAASoC,EAAAA,EAAAA,IAAY,CAAE1C,OAAQG,EAAMH,UACrCW,EAAS,KAIjB,CAAE,MAAOgC,GACDA,EAAMT,SAENF,QAAQW,MAAM,yBAA0BA,EAAMT,SAASG,MAEhDM,EAAMC,QAEbZ,QAAQW,MAAM,iBAAkBA,EAAMC,SAGtCZ,QAAQW,MAAM,oBAAqBA,EAAME,QAE/C,GAS+BrB,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,QAAMK,UAAU,WAAUH,SAAC,wBAC3BF,EAAAA,EAAAA,KAAA,SAAOK,UAAU,WAAWmB,KAAK,OAAOC,GAAG,SAASC,YAAY,gEAAc9B,KAAK,SAASC,MAAOhB,EAAMH,OAAQiD,SAAUjC,KAE3HM,EAAAA,EAAAA,KAAA,QAAMK,UAAU,WAAUH,SAAC,8BAC3BF,EAAAA,EAAAA,KAAA,SAAOK,UAAU,WAAWmB,KAAK,WAAWC,GAAG,eAAeC,YAAY,sEAAe9B,KAAK,WAAWC,MAAOhB,EAAMF,SAAUgD,SAAUjC,KAI5IM,EAAAA,EAAAA,KAAA,OAAKK,UAAU,WAAUH,UACxBF,EAAAA,EAAAA,KAAA,UAAQK,UAAU,OAAOmB,KAAK,SAAQtB,SAAE,6BAM3CF,EAAAA,EAAAA,KAAC4B,EAAAA,KAAI,CAACC,GAAI,cAAexB,UAAU,gBAAeH,SAAC,6DAErDF,EAAAA,EAAAA,KAAA,QAAMK,UAAU,kBAAiBH,SAAC,qEAClCE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWH,SAAA,EACtBF,EAAAA,EAAAA,KAAA,UAAQK,UAAU,cAAaH,UAACF,EAAAA,EAAAA,KAAC4B,EAAAA,KAAI,CAACC,GAAI,YAAY3B,SAAE,mDACxDF,EAAAA,EAAAA,KAAA,UAAQK,UAAU,cAAaH,UAACF,EAAAA,EAAAA,KAAC4B,EAAAA,KAAI,CAACC,GAAI,YAAY3B,SAAE,2DAKzD,C","sources":["hooks/useCustomLogin.js","pages/login/UserLoginPage.js"],"sourcesContent":["import {createSearchParams, Navigate, useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginPostAsync, logout} from \"../slices/loginSlice\";\n\nconst useCustomLogin = () => {\n\n    const navigate = useNavigate()\n    const dispatch = useDispatch()\n    const loginState = useSelector(state => state.loginSlice) //로그인,로그아웃 했을 경우의 상태\n    const isLogin = loginState.userId ?true :false //로그인 여부\n\n    // const doLogin = async (loginParam) => { //로그인 함수\n    //     const action = await dispatch(loginPostAsync(loginParam))\n    //\n    //     return action.payload\n    // }\n\n    const doLogout =() => { //로그아웃 함수\n        dispatch(logout())\n    }\n\n    const moveToPath = (path) =>{ //페이지 이동\n        navigate({pathname:path},{replace:true})\n    }\n\n    const moveToLogin = () => { //로그인페이지로 이동\n        navigate({pathname:'/user/login'},{replace:true})\n    }\n\n    const moveToLoginReturn = () => { //로그인페이지로 이동 페이지(로그인해야지만 이용 가능한 페이지 클릭(이동시))\n        return<Navigate replace to=\"/user/login\" />\n    }\n\n    const exceptionHandle = (ex) =>{\n        console.log(\"Exception..........\")\n        console.log(ex)\n        const errorMsg = ex.response.data.error\n        const errorStr = createSearchParams({error:errorMsg}).toString()\n\n        if(errorMsg === 'REQUIRE_LOGIN'){\n            alert(\"로그인을 진행해주세요!\")\n            navigate({pathname:'/user/login',search:errorStr})\n            return\n        }\n        if(ex.response.data.error === \"ERROR_ACCESSDENIED\"){\n            alert(\"해당 메뉴를 사용할 권한이 없습니다.\")\n            navigate({pathname:'/user/login',search:errorStr})\n            return\n        }\n    }\n\n    return{loginState, isLogin, doLogout, moveToPath, moveToLogin, moveToLoginReturn, exceptionHandle}\n}\nexport default useCustomLogin;","import {Link, useNavigate} from \"react-router-dom\";\nimport BasicLaylout from \"../../layouts/BasicLayout\";\nimport \"./LoginForm.css\"\nimport {useEffect, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {login as loginAction} from \"../../slices/loginSlice\";\nimport {Form} from \"react-bootstrap\";\nimport axios from \"axios\";\nimport useCustomLogin from \"../../hooks/useCustomLogin\";\n\n\nconst initState={\n    userId:\"\",\n    password:\"\"\n}\nconst UserLoginPage =()=>{\n\n    const [login,setLogin] = useState({...initState});\n\n\n\n    // const {doLogout, moveToPath} =useCustomLogin()\n    //  const userId = loginState.userId ? `Welcome, ${loginState.userId}` : 'Welcome';\n    const isLoggedIn = useSelector((state) => state.login.isLoggedIn);\n\n\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    const fetchData = async()=>{\n        try{\n            const response = await axios.get(\"/api/userLogin\");\n            setLogin(response.data);\n        }catch (error){\n            console.log('ERROR FETCHING USER LOGIN : ', error);\n        }\n    };\n\n    useEffect(() => {\n        const isLoggedIn = localStorage.getItem('isLoggedIn');\n        if (isLoggedIn) {\n            // 로그인 상태인 경우 홈페이지로 이동\n            navigate(\"/\");\n        }\n    }, [navigate]);\n\n\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        setLogin((prevLogin) => ({\n            ...prevLogin,\n            [name]: value,\n        }));\n    };\n\n    const handleSubmit = async (e) => {\n\n        // 새로고침 방지\n        e.preventDefault();\n\n        console.log(login.userId);\n        console.log(login.password);\n\n        try {\n            const response = await axios.post(\"/api/userLogin\", {\n                userId: login.userId,\n                password: login.password\n\n            });\n            // await doLogin(login);\n            if (response.data.alertMessage) {\n                // 에러 또는 성공 메시지가 있으면 alert 창 띄우기\n                alert(response.data.alertMessage);\n            }\n\n            if (response.data.successMessage) {\n                console.log('Form submitted successfully:', response.data.successMessage);\n                localStorage.setItem(\"isLoggedIn\", true);\n                dispatch(loginAction({ userId: login.userId }));\n                navigate(\"/\");\n\n\n            }\n        } catch (error) {\n            if (error.response) {\n                // 서버 응답이 에러인 경우\n                console.error('Error submitting form:', error.response.data);\n                // 클라이언트에서 에러 메시지 처리 로직 추가\n            } else if (error.request) {\n                // 요청이 전혀 이루어지지 않은 경우\n                console.error('Request error:', error.request);\n            } else {\n                // 기타 에러\n                console.error('Unexpected error:', error.message);\n            }\n          }\n\n    }\n    return(\n      <>\n      <BasicLaylout>\n      <div className=\"loginBox\">\n        <h1><b>로그인</b></h1>\n\n            <Form onSubmit={handleSubmit}>\n            <span className=\"formName\">아이디</span>\n            <input className=\"formInfo\" type=\"text\" id=\"id_val\" placeholder=\"아이디를 입력해주세요\" name=\"userId\" value={login.userId} onChange={handleInputChange}></input>\n\n            <span className=\"formName\">비밀번호</span>\n            <input className=\"formInfo\" type=\"password\" id=\"password_val\" placeholder=\"비밀번호를 입력해주세요\" name=\"password\" value={login.password} onChange={handleInputChange}></input>\n\n\n\n          <div className=\"loginBtn\">\n           <button className=\"s_bt\" type=\"submit\" >로그인</button>\n            </div>\n            {/*<input type=\"hidden\" className=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />*/}\n            {/*  토큰값 가져갈수있나..?  */}\n            </Form>\n\n        <Link to={\"/host/login\"} className=\"another-login\">호스트로 로그인하기</Link>\n\n      <span className=\"choiceNewmember\">아직 회원이 아니신가요?</span>\n      <div className=\"newmember\">\n          <button className=\"another-btn\"><Link to={\"/host/new\"} >호스트 회원가입</Link></button>\n          <button className=\"another-btn\"><Link to={\"/user/new\"} >게스트 회원가입</Link></button>\n      </div>\n\n      </div>\n      </BasicLaylout>\n      </>\n    )\n\n}\nexport default UserLoginPage;\n\n\n\n\n//    // const [loginParam, setLoginParam] = useState({})\n//     // const {doLogin,moveToPath} = useCustomLogin()\n//     //\n//     //\n//     // const dispatch = useDispatch()\n//     // const navigate= useNavigate()\n//     //\n//     //     //동기화 호출\n//     //     //dispatch(login(loginParam))\n//     //\n//     //     //비동기 호출\n//     //     // dispatch(loginPostAsync(loginParam))//loginSlice의 비동기 호출\n//     //     //     .unwrap()\n//     //     //     .then(data => {\n//     //     //         console.log(\"after unwrap\")\n//     //     //         console.log(data)\n//     //     //         if(data.error){\n//     //     //             alert(\"아이디와 비밀번호를 다시 확인해주세요!\")\n//     //     //         }else{\n//     //     //             alert(\"로그인 성공\")\n//     //     //             navigate({pathname:\"/\"},{replace:true}) //뒤로 가기 했을때 로그인 화면 볼 수 없게\n//     //     //         }\n//     //     //     })\n//     //\n//     // const handleClickLogin = () =>{\n//     //     //useCustomLogin 이용\n//     //     doLogin(loginParam) //loginSlice의 비동기 호출\n//     //         .then(data=>{\n//     //             console.log(data)\n//     //\n//     //             if(data.error){\n//     //                 alert(\"아이디와 비밀번호를 다시 확인해주세요!\")\n//     //             }else{\n//     //                 alert(\"로그인 성공\")\n//     //                 moveToPath('/')\n//     //             }\n//     //         })\n//     //\n//     //         }"],"names":["initState","userId","password","UserLoginPage","login","setLogin","useState","dispatch","useSelector","state","isLoggedIn","useDispatch","navigate","useNavigate","useEffect","localStorage","getItem","handleInputChange","e","name","value","target","prevLogin","_jsx","_Fragment","children","BasicLaylout","_jsxs","className","Form","onSubmit","async","preventDefault","console","log","response","axios","post","data","alertMessage","alert","successMessage","setItem","loginAction","error","request","message","type","id","placeholder","onChange","Link","to"],"sourceRoot":""}