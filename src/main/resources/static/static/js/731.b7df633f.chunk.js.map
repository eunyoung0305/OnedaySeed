{"version":3,"file":"static/js/731.b7df633f.chunk.js","mappings":"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","sources":["hooks/useCustomLogin.js","layouts/BasicLayout.js","pages/login/UserLoginPage.js"],"sourcesContent":["import {createSearchParams, Navigate, useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginPostAsync, logout} from \"../slices/loginSlice\";\n\nconst useCustomLogin = () => {\n\n    const navigate = useNavigate()\n    const dispatch = useDispatch()\n    const loginState = useSelector(state => state.loginSlice) //로그인,로그아웃 했을 경우의 상태\n    const isLogin = loginState.userId ?true :false //로그인 여부\n    const doLogin = async (loginParam) => { //로그인 함수\n        const action = await dispatch(loginPostAsync(loginParam))\n\n        return action.payload\n    }\n\n    const doLogout =() => { //로그아웃 함수\n        dispatch(logout())\n    }\n\n    const moveToPath = (path) =>{ //페이지 이동\n        navigate({pathname:path},{replace:true})\n    }\n\n    const moveToLogin = () => { //로그인페이지로 이동\n        navigate({pathname:'/user/login'},{replace:true})\n    }\n\n    const moveToLoginReturn = () => { //로그인페이지로 이동 페이지(로그인해야지만 이용 가능한 페이지 클릭(이동시))\n        return<Navigate replace to=\"/user/login\" />\n    }\n\n    const exceptionHandle = (ex) =>{\n        console.log(\"Exception..........\")\n        console.log(ex)\n        const errorMsg = ex.response.data.error\n        const errorStr = createSearchParams({error:errorMsg}).toString()\n\n        if(errorMsg === 'REQUIRE_LOGIN'){\n            alert(\"로그인을 진행해주세요!\")\n            navigate({pathname:'/user/login',search:errorStr})\n            return\n        }\n        if(ex.response.data.error === \"ERROR_ACCESSDENIED\"){\n            alert(\"해당 메뉴를 사용할 권한이 없습니다.\")\n            navigate({pathname:'/user/login',search:errorStr})\n            return\n        }\n    }\n\n    return{loginState, isLogin, doLogin, doLogout, moveToPath, moveToLogin, moveToLoginReturn, exceptionHandle}\n}\nexport default useCustomLogin;","import { Link } from \"react-router-dom\";\nimport \"./BasicLayout.css\"\nimport BasicMenu from \"../components/menus/BasicMenu.js\";\nimport {useSelector} from \"react-redux\";\nimport useCustomLogin from \"../hooks/useCustomLogin\";\n\nconst BasicLayout = ({children}) => {\n\n    const {doLogout, moveToPath} =useCustomLogin()\n\n const handleClickLogout =()=>{\n        doLogout()\n     alert(\"로그아웃되었습니다.\")\n     moveToPath(\"/\")\n }\n\n    const loginState = useSelector(state => state.loginSlice)\n  return(\n    <>\n    \n    <header>\n    <nav className=\"navbar navbar-expand-lg\" id=\"nav\" >\n    <div className=\"container-fluid\" id=\"nav-form\">\n      <a href={'/'} className=\"navbar-brand\" id='logo'>OnedaySeed</a>\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      < ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n        <li className=\"nav-item\">\n          <a href={'/about'} className=\"nav-link active\" aria-current=\"page\" >About Us</a>\n        </li>\n\n          {/* 로그인한 사용자에게만 보이게\n          {loginState.id ?\n          <> */}\n        <li className=\"nav-item\">\n          <a href={'/mypage'} className=\"nav-link\">My Page</a>\n        </li>\n      {/* </>\n        :<></>} */}\n\n          {/* 로그인한 사용자에게만 보이게\n          {loginState.id ?\n              <> */}\n                  <li className=\"nav-item\">\n                      <a className=\"nav-link\">Logout</a>\n                  </li>\n              {/* </>\n              :<></>} */}\n\n\n\n        {/* 로그인 전 사용자에게 '로그인' 보이게 */}\n          { ! loginState.id?\n              <>\n        <li class=\"nav-item\">\n          <a href={\"/user/login\"} className=\"nav-link disabled\" aria-disabled=\"true\" >Login</a>\n        </li>\n              </>: <></> }\n      </ul>\n      <form className=\"d-flex\" role=\"search\">\n        <input className=\"form-control me-2 \" id=\"search-input\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n        <button className=\"btn btn-outline-success \" id='search-btn' type=\"submit\">Search</button>\n      </form>\n    </div>\n  </div>\n </nav>\n <hr/>\n    </header>\n\n\n          <main>\n            {children}\n          </main>\n\n    <footer>\n    <hr/>\n      <div className=\"footer-body\">\n        <span><b>(주)원데이씨드</b> <br/>\n        <span className=\"our-info\">서울시 종로구 인사동길 12 15층 <br/>\n         사업자등록번호 : 135-87-***** | 통신판매업 : 신고번호 제2024-서울종로-987**호  <br/>\n         </span> <br/>\n         <span className=\"not-host\">(주)원데이씨드는 통신판매중개자이며, 통신판매의 당사자가 아닙니다. 상품, 상품정보, 거래에 관한 의무와 책임은 판매자에게 있습니다.</span>\n        </span>\n        <br/><br/><br/><br/>\n      </div>   \n    </footer>\n\n\n    </>\n\n  )\n}\nexport default BasicLayout;","import {Link, useNavigate} from \"react-router-dom\";\nimport BasicLaylout from \"../../layouts/BasicLayout\";\nimport \"./LoginForm.css\"\nimport {useEffect, useState} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {login, loginPostAsync} from \"../../slices/loginSlice\";\nimport {Form} from \"react-bootstrap\";\nimport axios from \"axios\";\nimport useCustomLogin from \"../../hooks/useCustomLogin\";\n\nconst UserLoginPage =()=>{\n\n    // const [loginParam, setLoginParam] = useState({})\n    // const {doLogin,moveToPath} = useCustomLogin()\n    //\n    //\n    // const dispatch = useDispatch()\n    // const navigate= useNavigate()\n    //\n    // // const fetchData = async ()=> {\n    // //     try{\n    // //         const response = await axios.get(\"/api/new\");\n    // //         setLoginParam(response.data)\n    // //     }catch(error){\n    // //         console.log(\"Error fetching user details : \", error);\n    // //     }\n    // // }\n    // //\n    // // useEffect(() => {\n    // //     fetchData();\n    // // }, []);\n    //\n    // const handleChange = (e) => {\n    //     loginParam[e.target.name] = e.target.value\n    //\n    //     setLoginParam({...loginParam})\n    // }\n    //\n    // // const handleClickLogin = async(e) => {\n    // //\n    // //         try {\n    // //             const response = await axios.post(\"/api/new\", {\n    // //                 userId: loginParam.userId,\n    // //                 userPassword: loginParam.userPassword\n    // //             });\n    // //\n    // //             if (response.data.alertMessage) {\n    // //                 alert(response.data.alertMessage);\n    // //             }\n    // //             if (response.data.successMsg) {\n    // //                 console.log(\"'Form submitted successfully:', response.data.successMessage\");\n    // //                 fetchData();\n    // //             }\n    // //         }catch (error){\n    // //             if(error.response){\n    // //                 // 서버 응답이 에러인 경우\n    // //                 console.error('Error submitting form:', error.response.data);\n    // //             }else if (error.request) {\n    // //                 // 요청이 전혀 이루어지지 않은 경우\n    // //                 console.error('Request error:', error.request);\n    // //             } else {\n    // //                 // 기타 에러\n    // //                 console.error('Unexpected error:', error.message);\n    // //             }\n    // //\n    // //     }\n    //\n    //     //동기화 호출\n    //     //dispatch(login(loginParam))\n    //\n    //     //비동기 호출\n    //     // dispatch(loginPostAsync(loginParam))//loginSlice의 비동기 호출\n    //     //     .unwrap()\n    //     //     .then(data => {\n    //     //         console.log(\"after unwrap\")\n    //     //         console.log(data)\n    //     //         if(data.error){\n    //     //             alert(\"아이디와 비밀번호를 다시 확인해주세요!\")\n    //     //         }else{\n    //     //             alert(\"로그인 성공\")\n    //     //             navigate({pathname:\"/\"},{replace:true}) //뒤로 가기 했을때 로그인 화면 볼 수 없게\n    //     //         }\n    //     //     })\n    //\n    // const handleClickLogin = () =>{\n    //     //useCustomLogin 이용\n    //     doLogin(loginParam) //loginSlice의 비동기 호출\n    //         .then(data=>{\n    //             console.log(data)\n    //\n    //             if(data.error){\n    //                 alert(\"아이디와 비밀번호를 다시 확인해주세요!\")\n    //             }else{\n    //                 alert(\"로그인 성공\")\n    //                 moveToPath('/')\n    //             }\n    //         })\n    //\n    //         }\n\n\n    const [login,setLogin] = useState({});\n\n    const fetchData = async()=>{\n        try{\n            const response = await axios.get(\"/api/userLogin\");\n            setLogin(response.data);\n        }catch (error){\n            console.log('ERROR FETCHING USER LOGIN : ', error);\n        }\n    };\n\n    useEffect(() => {\n        fetchData()\n    }, []);\n\n\n    const handleInputChange = (e) =>{\n        setLogin({[e.target.name]:e.target.value});\n        console.log(setLogin);\n    }\n\n    const handleSubmit = async (e) =>{\n        // 새로고침 방지\n        e.preventDefault();\n\n        try{\n            const response = await axios.post(\"/api/userLogin\",{\n\n                userId: login.userId,\n                userPassword: login.userPassword\n            });\n\n            if (response.data.alertMessage) {\n                // 에러 또는 성공 메시지가 있으면 alert 창 띄우기\n                alert(response.data.alertMessage);\n            }\n\n            if (response.data.successMessage) {\n                console.log('Form submitted successfully:', response.data.successMessage);\n                fetchData();\n                setLogin({});\n            }\n        } catch (error) {\n            if (error.response) {\n                // 서버 응답이 에러인 경우\n                console.error('Error submitting form:', error.response.data);\n                // 클라이언트에서 에러 메시지 처리 로직 추가\n            } else if (error.request) {\n                // 요청이 전혀 이루어지지 않은 경우\n                console.error('Request error:', error.request);\n            } else {\n                // 기타 에러\n                console.error('Unexpected error:', error.message);\n            }\n          }\n\n    }\n    return(\n      <>\n      <BasicLaylout>\n      <div className=\"loginBox\">\n        <h1>로그인</h1>\n\n            <Form onSubmit={handleSubmit}>\n            <span className=\"formName\">아이디</span>\n            <input className=\"formInfo\" type=\"text\" id=\"id_val\" placeholder=\"아이디를 입력해주세요\" value={login.userId} onChange={handleInputChange}></input>\n\n            <span className=\"formName\">비밀번호</span>\n            <input className=\"formInfo\" type=\"password\" id=\"password_val\" placeholder=\"비밀번호를 입력해주세요\" value={login.userPassword} onChange={handleInputChange}></input>\n\n\n\n          <div className=\"loginBtn\">\n           <button className=\"s_bt\" type=\"submit\" >로그인</button>\n            </div>\n            {/*<input type=\"hidden\" className=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />*/}\n            {/*  토큰값 가져갈수있나..?  */}\n            </Form>\n\n        <Link to={\"/host\"} className=\"another-login\">호스트로 로그인하기</Link>\n\n      <span className=\"choiceNewmember\">아직 회원이 아니신가요?</span>\n      <div className=\"newmember\">\n          <button><Link to={\"/newHost\"}>호스트 회원가입</Link></button>\n          <button><Link to={\"/newUser\"}>게스트 회원가입</Link></button>\n      </div>\n\n      </div>\n      </BasicLaylout>\n      </>\n    )\n  \n}\nexport default UserLoginPage;"],"names":["useCustomLogin","navigate","useNavigate","dispatch","useDispatch","loginState","useSelector","state","loginSlice","isLogin","userId","doLogin","async","loginPostAsync","loginParam","payload","doLogout","logout","moveToPath","path","pathname","replace","moveToLogin","moveToLoginReturn","_jsx","Navigate","to","exceptionHandle","ex","console","log","errorMsg","response","data","error","errorStr","createSearchParams","toString","alert","search","_ref","children","_jsxs","_Fragment","className","id","href","type","class","role","placeholder","UserLoginPage","login","setLogin","useState","fetchData","axios","get","useEffect","handleInputChange","e","target","name","value","BasicLaylout","Form","onSubmit","preventDefault","post","userPassword","alertMessage","successMessage","request","message","onChange","Link"],"sourceRoot":""}